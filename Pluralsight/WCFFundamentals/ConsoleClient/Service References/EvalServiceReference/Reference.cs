//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.EvalServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EvalServiceReference.IEvalService")]
    public interface IEvalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/SumbitEval", ReplyAction="http://tempuri.org/IEvalService/SumbitEvalResponse")]
        void SumbitEval(EvalServiceLibrary.Eval eval);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEvalService/SumbitEval", ReplyAction="http://tempuri.org/IEvalService/SumbitEvalResponse")]
        System.IAsyncResult BeginSumbitEval(EvalServiceLibrary.Eval eval, System.AsyncCallback callback, object asyncState);
        
        void EndSumbitEval(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEvalService/GetEvals", ReplyAction="http://tempuri.org/IEvalService/GetEvalsResponse")]
        System.Collections.Generic.List<EvalServiceLibrary.Eval> GetEvals();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEvalService/GetEvals", ReplyAction="http://tempuri.org/IEvalService/GetEvalsResponse")]
        System.IAsyncResult BeginGetEvals(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<EvalServiceLibrary.Eval> EndGetEvals(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEvalServiceChannel : ConsoleClient.EvalServiceReference.IEvalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEvalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEvalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<EvalServiceLibrary.Eval> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<EvalServiceLibrary.Eval>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EvalServiceClient : System.ServiceModel.ClientBase<ConsoleClient.EvalServiceReference.IEvalService>, ConsoleClient.EvalServiceReference.IEvalService {
        
        private BeginOperationDelegate onBeginSumbitEvalDelegate;
        
        private EndOperationDelegate onEndSumbitEvalDelegate;
        
        private System.Threading.SendOrPostCallback onSumbitEvalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEvalsDelegate;
        
        private EndOperationDelegate onEndGetEvalsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEvalsCompletedDelegate;
        
        public EvalServiceClient() {
        }
        
        public EvalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EvalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SumbitEvalCompleted;
        
        public event System.EventHandler<GetEvalsCompletedEventArgs> GetEvalsCompleted;
        
        public void SumbitEval(EvalServiceLibrary.Eval eval) {
            base.Channel.SumbitEval(eval);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSumbitEval(EvalServiceLibrary.Eval eval, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSumbitEval(eval, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSumbitEval(System.IAsyncResult result) {
            base.Channel.EndSumbitEval(result);
        }
        
        private System.IAsyncResult OnBeginSumbitEval(object[] inValues, System.AsyncCallback callback, object asyncState) {
            EvalServiceLibrary.Eval eval = ((EvalServiceLibrary.Eval)(inValues[0]));
            return this.BeginSumbitEval(eval, callback, asyncState);
        }
        
        private object[] OnEndSumbitEval(System.IAsyncResult result) {
            this.EndSumbitEval(result);
            return null;
        }
        
        private void OnSumbitEvalCompleted(object state) {
            if ((this.SumbitEvalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SumbitEvalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SumbitEvalAsync(EvalServiceLibrary.Eval eval) {
            this.SumbitEvalAsync(eval, null);
        }
        
        public void SumbitEvalAsync(EvalServiceLibrary.Eval eval, object userState) {
            if ((this.onBeginSumbitEvalDelegate == null)) {
                this.onBeginSumbitEvalDelegate = new BeginOperationDelegate(this.OnBeginSumbitEval);
            }
            if ((this.onEndSumbitEvalDelegate == null)) {
                this.onEndSumbitEvalDelegate = new EndOperationDelegate(this.OnEndSumbitEval);
            }
            if ((this.onSumbitEvalCompletedDelegate == null)) {
                this.onSumbitEvalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSumbitEvalCompleted);
            }
            base.InvokeAsync(this.onBeginSumbitEvalDelegate, new object[] {
                        eval}, this.onEndSumbitEvalDelegate, this.onSumbitEvalCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<EvalServiceLibrary.Eval> GetEvals() {
            return base.Channel.GetEvals();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEvals(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEvals(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<EvalServiceLibrary.Eval> EndGetEvals(System.IAsyncResult result) {
            return base.Channel.EndGetEvals(result);
        }
        
        private System.IAsyncResult OnBeginGetEvals(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetEvals(callback, asyncState);
        }
        
        private object[] OnEndGetEvals(System.IAsyncResult result) {
            System.Collections.Generic.List<EvalServiceLibrary.Eval> retVal = this.EndGetEvals(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEvalsCompleted(object state) {
            if ((this.GetEvalsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEvalsCompleted(this, new GetEvalsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEvalsAsync() {
            this.GetEvalsAsync(null);
        }
        
        public void GetEvalsAsync(object userState) {
            if ((this.onBeginGetEvalsDelegate == null)) {
                this.onBeginGetEvalsDelegate = new BeginOperationDelegate(this.OnBeginGetEvals);
            }
            if ((this.onEndGetEvalsDelegate == null)) {
                this.onEndGetEvalsDelegate = new EndOperationDelegate(this.OnEndGetEvals);
            }
            if ((this.onGetEvalsCompletedDelegate == null)) {
                this.onGetEvalsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEvalsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEvalsDelegate, null, this.onEndGetEvalsDelegate, this.onGetEvalsCompletedDelegate, userState);
        }
    }
}
